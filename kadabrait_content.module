<?php

/**
 * @file
 * Primary module hooks for Kadabra IT Content module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\RoleInterface;

/**
 * Implements hook_help().
 */
function kadabrait_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.kadabrait_content':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Displays user-specific content listings.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_install().
 */
function kadabrait_content_install() {
  // Grant permission to authenticated users.
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access user contents']);

  // Get the default theme.
  $default_theme = \Drupal::config('system.theme')->get('default');
  
  // Check if block already exists.
  $existing_block = Block::load('user_contents_block');
  if (!$existing_block) {
    // Create the block.
    $values = [
      'id' => 'user_contents_block',
      'theme' => $default_theme,
      'plugin' => 'user_contents_block',
      'region' => 'sidebar',
      'status' => TRUE,
      'settings' => [
        'id' => 'user_contents_block',
        'label' => 'User Contents',
        'label_display' => 'visible',
        'provider' => 'kadabrait_content',
      ],
      'visibility' => [
        'request_path' => [
          'id' => 'request_path',
          'negate' => FALSE,
          'pages' => '<front>',
        ],
        'user_role' => [
          'id' => 'user_role',
          'roles' => [
            RoleInterface::AUTHENTICATED_ID => RoleInterface::AUTHENTICATED_ID,
          ],
          'negate' => FALSE,
          'context_mapping' => [
            'user' => '@user.current_user_context:current_user',
          ],
        ],
      ],
      'weight' => 0,
    ];
    
    $block = Block::create($values);
    $block->save();
    
    // Clear the cache to ensure the block is visible.
    \Drupal::service('cache.render')->invalidateAll();
  }
}
